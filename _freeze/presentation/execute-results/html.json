{
  "hash": "c7b76210afc2d024329eb0e52e63d7c4",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Uncovering Patterns and Anomalies in Manufacturing Data\"\nsubtitle: \"INFO 523 - Summer 2025 - Final Project\"\nauthor: \"Cesar Castro M.\"\ntitle-slide-attributes:\n  data-background-image: images/background.png\n  data-background-size: stretch\n  data-background-opacity: \"0.7\"\n  data-slide-number: none\nformat:\n  revealjs:\n    theme:  ['data/customtheming.scss']\n  \neditor: visual\njupyter: python3\nexecute:\n  echo: false\n---\n\n\n\n\n# Uncovering Patterns and Anomalies in Manufacturing Data\n\n## Introduction\n\n-   All code used to generate the charts and table on this presentation can be found here:\n-   https://github.com/INFO-523-SU25/final-project-castro/tree/main/src\n\n## Dataset for Machine Learning Classification\n\n-   Source: [Machine Predictive Maintenance Classification](https://www.kaggle.com/datasets/shivamb/machine-predictive-maintenance-classification)\n\n-   Key Features:\n\n    ::: {style=\"font-size: 0.5em;\"}\n    -   UID: unique identifier ranging from 1 to 10000\n    -   productID: consisting of a letter L, M, or H for low (50% of all products), medium (30%), and high (20%) as product quality variants and a variant-specific serial number\n    -   Type: is a columns that consist only on the letters L, M and H from productID.\n    -   air temperature \\[K\\]: generated using a random walk process later normalized to a standard deviation of 2 K around 300 K\n    -   process temperature \\[K\\]: generated using a random walk process normalized to a standard deviation of 1 K, added to the air temperature plus 10 K.\n    -   rotational speed \\[rpm\\]: calculated from powepower of 2860 W, overlaid with a normally distributed noise\n    -   torque \\[Nm\\]: torque values are normally distributed around 40 Nm with an Ïƒ = 10 Nm and no negative values.\n    -   tool wear \\[min\\]: The quality variants H/M/L add 5/3/2 minutes of tool wear to the used tool in the process.\n    -   Machine failure: label that indicates, whether the machine has failed in this particular data point for any of the following failure modes are true\n    :::\n\n## Manufacturing Data Exploration\n\nExample of 5 rows of the synthetic data used for predictive modeling.\n\n::: {style=\"font-size: 0.5em;\"}\n\n::: {#f3091b26 .cell execution_count=4}\n\n::: {.cell-output .cell-output-display execution_count=4}\n<table border=\"1\" class=\"dataframe\">\\n  <thead>\\n    <tr style=\"text-align: right;\">\\n      <th></th>\\n      <th>UDI</th>\\n      <th>Product ID</th>\\n      <th>Type</th>\\n      <th>Air temperature [K]</th>\\n      <th>Process temperature [K]</th>\\n      <th>Rotational speed [rpm]</th>\\n      <th>Torque [Nm]</th>\\n      <th>Tool wear [min]</th>\\n      <th>Target</th>\\n      <th>Failure Type</th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr>\\n      <th>0</th>\\n      <td>1</td>\\n      <td>M14860</td>\\n      <td>M</td>\\n      <td>298.1</td>\\n      <td>308.6</td>\\n      <td>1551</td>\\n      <td>42.8</td>\\n      <td>0</td>\\n      <td>0</td>\\n      <td>No Failure</td>\\n    </tr>\\n    <tr>\\n      <th>1</th>\\n      <td>2</td>\\n      <td>L47181</td>\\n      <td>L</td>\\n      <td>298.2</td>\\n      <td>308.7</td>\\n      <td>1408</td>\\n      <td>46.3</td>\\n      <td>3</td>\\n      <td>0</td>\\n      <td>No Failure</td>\\n    </tr>\\n    <tr>\\n      <th>2</th>\\n      <td>3</td>\\n      <td>L47182</td>\\n      <td>L</td>\\n      <td>298.1</td>\\n      <td>308.5</td>\\n      <td>1498</td>\\n      <td>49.4</td>\\n      <td>5</td>\\n      <td>0</td>\\n      <td>No Failure</td>\\n    </tr>\\n    <tr>\\n      <th>3</th>\\n      <td>4</td>\\n      <td>L47183</td>\\n      <td>L</td>\\n      <td>298.2</td>\\n      <td>308.6</td>\\n      <td>1433</td>\\n      <td>39.5</td>\\n      <td>7</td>\\n      <td>0</td>\\n      <td>No Failure</td>\\n    </tr>\\n    <tr>\\n      <th>4</th>\\n      <td>5</td>\\n      <td>L47184</td>\\n      <td>L</td>\\n      <td>298.2</td>\\n      <td>308.7</td>\\n      <td>1408</td>\\n      <td>40.0</td>\\n      <td>9</td>\\n      <td>0</td>\\n      <td>No Failure</td>\\n    </tr>\\n  </tbody>\\n</table>\n:::\n:::\n\n\n:::\n\n## Manufacturing Data Exploration\n\nNumerical Features Relationship\n\n:::::: columns\n::: {.column width=\"60%\"}\n\n::: {#471275ba .cell fig-height='10' fig-width='10' execution_count=5}\n\n::: {.cell-output .cell-output-display}\n```\n<Figure size 3000x1800 with 0 Axes>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](presentation_files/figure-revealjs/cell-6-output-2.png){}\n:::\n:::\n\n\n:::\n\n:::: {.column width=\"40%\"}\n::: {style=\"font-size: 0.7em;\"}\n-   Failures marked on the pair plot showing stronger relationship with some features.\n-   There is some non-linear correlation observed between Torque and Rotation speed (suggesting data is not entirely random and mimic a real use case).\n-   Failures seems on the \"edges\" of the distributions for multiple features which might help models to identify them.\n:::\n::::\n::::::\n\n## Manufacturing Data Preparation\n\nData Scaling\n\n``` python\n#Standardization\nfrom sklearn.preprocessing import StandardScaler # use StandardScalar from sklearn\n\nmfg_data_scaled = mfg_data.copy().drop(columns=['Target'])\n\nscaler = StandardScaler()\nnum_cols = mfg_data_scaled.select_dtypes(include=\"number\").columns.to_list()\nmfg_data_scaled[num_cols] = scaler.fit_transform(mfg_data_scaled[num_cols])\n```\n\nCategorical Features Encoding\n\n``` python\nfrom sklearn.preprocessing import LabelEncoder\n\nl_encoder = LabelEncoder()\nmfg_data_3['FailureType_encoded'] = l_encoder.fit_transform(mfg_data_3['Failure Type'])\n```\n\n## Model Training\n\n::: {style=\"font-size: 0.7em;\"}\nUsing a method from Chanin Nantasenamat, multiple classification models were compared for ROC-AUC and the F1 score.\n:::\n\n![](images/paste-1.png){width=\"667\"}\n\n## Model Selection\n\n::: {style=\"font-size: 0.7em;\"}\nTwo models will be evaluated Random Forest Classifer based on the results of the comparison and XGboost based on research model might be proper for imbalance datasets (<https://xgboosting.com/xgboost-for-imbalanced-classification/>)\n:::\n\n![](images/paste-2.png){width=\"953\"}\n\n::: {style=\"font-size: 0.7em;\"}\nSource: Data_Exploration_PDM-ipynb\n:::\n\n## Random Forest Model Tuning\n\n::: {style=\"font-size: 0.7em;\"}\nFor hyper-parameter tuning a combination of *sklearn.model_selection - GridSearchCV and RandomizedSearchCV* was used to run over multiple options.\n:::\n\n``` python\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom scipy.stats import randint, uniform\n\nparam_dist = {\n    'n_estimators': randint(50, 500),\n    'max_depth': randint(1, 20),\n    'min_samples_split': randint(2, 20),\n    'min_samples_leaf': randint(1, 20),\n    'max_features': ['auto', 'sqrt', 'log2']\n}\n\nrf = RandomForestClassifier()\nrand_search = RandomizedSearchCV(rf, param_distributions=param_dist, n_iter=20, cv=5,scoring='f1')\nrand_search.fit(X_train, y_train)\nprint('Best hyperparameters:', rand_search.best_params_)\n```\n\n## Random Forest Results\n\n::: {style=\"font-size: 0.7em;\"}\nAfter tuning the model, the best F1 score obtained is 0.62. Cross-validation results suggest the model is over-fitting and might not be able to generalize.\n\n-   RandomForestClassifier: ROC AUC on test dataset: 0.9751\n\n-   RandomForestClassifier: f1 score on test dataset: 0.6258\n\nCross Validation Results\n\n-   Test_f1 Cross Validation results 0.45\n\n-   Train_f1 Cross Validation results 0.83\n:::\n\n## Handling imbalanced dataset\n\n::: {style=\"font-size: 0.7em;\"}\nDifferent techniques were explored to see if the model would improve over-fitting and also the F1-score. Over sampling using Synthetic Minority Oversampling Technique (SMOTE) and under sampling using RandomUnderSampler from imblearn were used with no significant improvement\n:::\n\n## Random Forest Threshold Optimization\n\n::: {style=\"font-size: 0.7em;\"}\nTo improve the F1 score, a change in the probability threshold was explored; instead of using the standard 0.5, an analysis was done to estimate the ideal point to optimized the F1-Score\n:::\n\n![](images/paste-3.png){width=\"702\"}\n\n## Results of Optimized Model\n\n![](images/paste-4.png){width=\"870\"}\n\n::: {style=\"font-size: 0.7em;\"}\n-   After improving the threshold based on the model results, a balance can be found between precision and recall.\n:::\n\n## XGBoost Model Definition\n\n::: {style=\"font-size: 0.7em;\"}\nA second approach is to use XGBoost; this model has the option to handle weights for each class. By adding a higher weight to the minority class, it is expected to handle the imbalance in the dataset better.\n:::\n\n``` python\nimport xgboost as xgb\n\nscale_pos_weight = (len(y0) - np.sum(y0)) / np.sum(y0) #Intent is to give more weight to the minority class (1s on this case)\n\nxgmodel = xgb.XGBClassifier(\n    scale_pos_weight=scale_pos_weight,\n    use_label_encoder=False,\n    eval_metric='logloss',\n    random_state=42\n)\n\nxgmodel.fit(X_train, y_train)\ny_pred = xgmodel.predict(X_test)\n\nf1 = f1_score(y_test, y_pred)\nprint(f\"F1 Score: {f1:.3f}\")\n```\n\n## XGBoost Model Results\n\n::: {style=\"font-size: 0.7em;\"}\nThe F1 score for XGBoost without significant tuning and using weights is slightly better than the random forest model originally used.\n:::\n\n::::: columns\n::: {.column width=\"40%\"}\nModel Results\n\n-   F1 Score: 0.757\n\nCross Validation\n\n-   Test_f1 Cross Validation results 0.73\n\n-   Train_f1 Cross Validation results 1.00\n:::\n\n::: {.column width=\"60%\"}\n![](images/paste-7.png){width=\"738\"}\n:::\n:::::\n\n## XGBoost MultiClass Model\n\n::: {style=\"font-size: 0.7em;\"}\nXGBoost results were slightly better than Random Forest. Multi-class model will be created to predict the failure types:\n:::\n\n``` python\n# Defining weights for each class.\nclasses, counts = np.unique(y_train, return_counts=True)\ninv_freq = 1.0 / counts\nclass_weights = dict(zip(classes, inv_freq))\nsample_weights = np.array([class_weights[label] for label in y_train])\n```\n\n## XGBoost Model Results\n\n::::: columns\n::: {.column width=\"40%\"}\nModel Results\n\n-   F1 score per class:\n\n    -   Heat-Dissipation: 0.95\n    -   No Failure: 0.99\n    -   Overstrain Failure 0.76\n    -   Powe Failure: 0.8\n    -   Random Failures and Tool Wear Failure are both 0.\n:::\n\n::: {.column width=\"60%\"}\n![](images/paste-9.png){width=\"690\"}\n:::\n:::::\n\n## XGBoost Features of Importance\n\n::: {style=\"font-size: 0.7em;\"}\nAlthough the model performance is not great for all classes, understanding what features are important in the prediction model can help subject matter experts interpret results and take action to reduce failures and improve the process overall.\n:::\n\n![](images/paste-10.png){width=\"649\"}\n\n## Time Series Analysis\n\n::: {style=\"font-size: 0.7em;\"}\nThe second dataset consists of a simulated real-time sensor data from industrial machines. Source is also from Kaggle and it can be found here: <https://www.kaggle.com/datasets/ziya07/intelligent-manufacturing-dataset/data>\n:::\n\nKey Features:\n\n::: {style=\"font-size: 0.7em;\"}\n```         \n-   Industrial IoT Sensor Data\n    -   Temperature_C, Vibration_Hz, Power_Consumption_kW,\n-   Network Performance:\n    -   Network_Latency_ms, Packet_Loss_%, Quality_Control_Defect_Rate_%\n-   Production Indicators:\n    -   Production_Speed_units_per_hr, Predictive_Maintenance_Score, Error_Rate_%\n-   Target Column Efficiency_StatusKey Features:\n```\n:::\n\n## Time Serie Data Exploration\n\n::: {style=\"font-size: 0.7em;\"}\nExample of 5 rows of the synthetic data used for predictive modeling.\n:::\n\n::: {style=\"font-size: 0.5em;\"}\n\n::: {#eca5e693 .cell execution_count=6}\n\n::: {.cell-output .cell-output-display execution_count=6}\n<table border=\"1\" class=\"dataframe\">\\n  <thead>\\n    <tr style=\"text-align: right;\">\\n      <th></th>\\n      <th>Timestamp</th>\\n      <th>Machine_ID</th>\\n      <th>Operation_Mode</th>\\n      <th>Temperature_C</th>\\n      <th>Vibration_Hz</th>\\n      <th>Power_Consumption_kW</th>\\n      <th>Network_Latency_ms</th>\\n      <th>Packet_Loss_%</th>\\n      <th>Quality_Control_Defect_Rate_%</th>\\n      <th>Production_Speed_units_per_hr</th>\\n      <th>Predictive_Maintenance_Score</th>\\n      <th>Error_Rate_%</th>\\n      <th>Efficiency_Status</th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr>\\n      <th>0</th>\\n      <td>2024-01-01 00:00:00</td>\\n      <td>39</td>\\n      <td>Idle</td>\\n      <td>74.137590</td>\\n      <td>3.500595</td>\\n      <td>8.612162</td>\\n      <td>10.650542</td>\\n      <td>0.207764</td>\\n      <td>7.751261</td>\\n      <td>477.657391</td>\\n      <td>0.344650</td>\\n      <td>14.965470</td>\\n      <td>Low</td>\\n    </tr>\\n    <tr>\\n      <th>1</th>\\n      <td>2024-01-01 00:01:00</td>\\n      <td>29</td>\\n      <td>Active</td>\\n      <td>84.264558</td>\\n      <td>3.355928</td>\\n      <td>2.268559</td>\\n      <td>29.111810</td>\\n      <td>2.228464</td>\\n      <td>4.989172</td>\\n      <td>398.174747</td>\\n      <td>0.769848</td>\\n      <td>7.678270</td>\\n      <td>Low</td>\\n    </tr>\\n    <tr>\\n      <th>2</th>\\n      <td>2024-01-01 00:02:00</td>\\n      <td>15</td>\\n      <td>Active</td>\\n      <td>44.280102</td>\\n      <td>2.079766</td>\\n      <td>6.144105</td>\\n      <td>18.357292</td>\\n      <td>1.639416</td>\\n      <td>0.456816</td>\\n      <td>108.074959</td>\\n      <td>0.987086</td>\\n      <td>8.198391</td>\\n      <td>Low</td>\\n    </tr>\\n    <tr>\\n      <th>3</th>\\n      <td>2024-01-01 00:03:00</td>\\n      <td>43</td>\\n      <td>Active</td>\\n      <td>40.568502</td>\\n      <td>0.298238</td>\\n      <td>4.067825</td>\\n      <td>29.153629</td>\\n      <td>1.161021</td>\\n      <td>4.582974</td>\\n      <td>329.579410</td>\\n      <td>0.983390</td>\\n      <td>2.740847</td>\\n      <td>Medium</td>\\n    </tr>\\n    <tr>\\n      <th>4</th>\\n      <td>2024-01-01 00:04:00</td>\\n      <td>8</td>\\n      <td>Idle</td>\\n      <td>75.063817</td>\\n      <td>0.345810</td>\\n      <td>6.225737</td>\\n      <td>34.029191</td>\\n      <td>4.796520</td>\\n      <td>2.287716</td>\\n      <td>159.113525</td>\\n      <td>0.573117</td>\\n      <td>12.100686</td>\\n      <td>Low</td>\\n    </tr>\\n  </tbody>\\n</table>\n:::\n:::\n\n\n:::\n\n## Time Serie Data Exploration cont.\n\n::: {style=\"font-size: 0.7em;\"}\nExample distribution for one Feature\n:::\n\n![](images/paste-11.png){width=\"808\"}\n\n::: {style=\"font-size: 0.7em;\"}\nData seems randomly generated instead of coming from a real scenario.\n:::\n\n## Time Serie Data Exploration cont.\n\n::: {style=\"font-size: 0.7em;\"}\nIn order to make the data more like a real scenario, a mean was calculated for every 12 hours.\n:::\n\n![](images/paste-12.png){width=\"829\"}\n\n## Time Serie Data Exploration cont.\n\n::: {style=\"font-size: 0.7em;\"}\nExample Trend for Power_Consumption_kW for one of the machines.\n:::\n\n![](images/paste-14.png)\n\n## Time Serie Data Analysis\n\n::: {style=\"font-size: 0.7em;\"}\nAfter pre-processing the data, the study is focused on understanding how algorithms like the seasonal_decompose library and ARIMA (or auto_arima) can be used for anomaly detection.\n:::\n\n## Time Serie Data Seasonal-Decomposition\n\n``` python\n#https://www.statsmodels.org/stable/generated/statsmodels.tsa.seasonal.seasonal_decompose.html\nfrom statsmodels.tsa.seasonal import seasonal_decompose\n# Decompose the time series\ndecomposition = seasonal_decompose(ts_df['Power_Consumption_kW'], model = 'additive',period=14) # 7days for period\n```\n\n![](images/paste-15.png)\n\n## Time Serie Data Seasonal-Decomposition\n\n::: {style=\"font-size: 0.7em;\"}\nAnomaly detection using Residuals:\n:::\n\n``` python\n# Anomalies in residuals\nresiduals = decomposition.resid.dropna() #Obtain residuals from decompositions\nthreshold = 2 * residuals.std() # Our rule, on this cases based on research we selected to use 2X the standard deviation of the residuals\nanomalies = np.abs(residuals) > threshold # Applying the rule to obtain the anomalies\n```\n\n::: {style=\"font-size: 0.7em;\"}\n4 Data points identified as anomalies using this method\n:::\n\n## Time Serie Data ARIMA\n\n::: {style=\"font-size: 0.7em;\"}\nModel Fitting\n:::\n\n``` python\n#Fitting auto-arima model\nfrom pmdarima import auto_arima\nauto_model = auto_arima(ts_df['Power_Consumption_kW'], \n                        seasonal=False,\n \n                        error_action = 'ignore',  \n                        suppress_warnings = True, \n                        stepwise = True)\nprint(auto_model.summary())\nprint(f\"Best (p, d, q): ({auto_model.order[0]}, {auto_model.order[1]}, {auto_model.order[2]})\")\n```\n\n## Time Serie Data ARIMA - Results\n\n::: {style=\"font-size: 0.7em;\"}\nResults from Auto-Arima Model Fitting\n:::\n\n![](images/paste-16.png){width=\"943\"}\n\n## Time Serie Data ARIMA - Results Cont.\n\n::: {style=\"font-size: 0.7em;\"}\nResults from the predictions are almost a constant value around the center of the distribution, meaning the ARIMA model is closely predicting the mean for every single value of the time series data. One reason for this could be that the data are not predictable.\n:::\n\n![](images/paste-17.png)\n\n## Conclusions\n\n::: {style=\"font-size: 0.5em;\"}\n-   The study demonstrated the application of concepts in machine learning to a common manufacturing problem.\n\n-   The Random Forest Classifier model ROC-AUC scores are high, indicating the model can differentiate effectively between fails and no-fails. However, in a real manufacturing process, the majority of the results are positive/pass or no fails, making this indicator not the best for this case. Recall and precision are more appropriate for this case; depending on the use case, we would want to tune the model in one or the other direction or use the F1-score to optimize both.\n\n-   The Random Forest model performed poorly for the F1 score when using a standard threshold of 0.5. The study demonstrated this can be improved by selecting an optimized threshold based on the model results.\n\n-   Sampling can be a useful method to handle imbalanced datasets; however, in this specific case, it did not provide a significant improvement in model performance.\n\n-   Assigning weights to each classes to handle the imbalance sample in combination with gradient boosting (XGboost) model, resulted in better results for F1-Score.\n\n-   Multi-class classification results using the learnings from the binary-classification were demonstrated. Due to the nature and frequency of the failures and their relationship with the input features, two classes had zero F1-scores, meaning the model was not able to predict these. Other classes had an F1-score between 0.5 and 0.7, similar to the binary classification results.\n\n-   The study demonstrated how seasonal-decomposition and ARIMA can be used for anomaly detection in a real manufacturing use case; results showed how data points deviating the most from the center/target can be identified by using these methods. These methods might not be the best for a process where there are no patterns and data might just have random variability from the target.\n:::\n\n",
    "supporting": [
      "presentation_files"
    ],
    "filters": [],
    "includes": {}
  }
}