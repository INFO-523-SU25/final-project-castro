{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "1ea46fba",
   "metadata": {},
   "source": [
    "---\n",
    "title: \"Uncovering Patterns and Anomalies in Manufacturing Data\"\n",
    "subtitle: \"INFO 523 - Final Project\"\n",
    "author: \n",
    "  - name: \"Cesar Castro\"\n",
    "    affiliations:\n",
    "      - name: \"College of Information Science, University of Arizona\"\n",
    "description: \"Project description\"\n",
    "format:\n",
    "  html:\n",
    "    code-tools: true\n",
    "    code-overflow: wrap\n",
    "    code-line-numbers: true\n",
    "    embed-resources: true\n",
    "editor: visual\n",
    "code-annotations: hover\n",
    "execute:\n",
    "  warning: false\n",
    "jupyter: python3\n",
    "---\n",
    "\n",
    "## **Project Description:**\n",
    "\n",
    "-    Uncovering Patterns and Anomalies in Manufacturing Data\n",
    "\n",
    "## **🎯Goals:**\n",
    "\n",
    "The construction of modern factories is resulting in the generation of vast amounts of data. Manufacturing equipment continuously monitors various parameters, such as temperatures, vibrations, motor speeds, and energy consumption, using sensors and other methods. Variations in these parameters can indicate shifts in performance, potentially leading to defects or catastrophic failures in the equipment. Detecting these shifts has become increasingly important to reduce downtime and boost productivity.\n",
    "\n",
    "Advanced techniques such as machine learning, anomaly detection, and image analysis are currently being utilized to forecast when equipment might require maintenance, calibration, or material changes. This project aims to leverage synthetic public data from Kaggle to compare various classification and regression models, with the objective of predicting these critical events. If time allows, we will also explore anomaly detection techniques on time series data to predict potential failures as early as possible.\n",
    "\n",
    "Specific Objectives:\n",
    "\n",
    "1)  First objective is to build a classification model for predictive maintenance (will compare multiple options). The model will analyze sensor data, such as air temperature, process temperature, rotational speed, and torque, from a predictive maintenance dataset to accurately predict the specific Failure Type.\n",
    "\n",
    "2)  Second objective is to develop a regression model for anomaly detection and compare to time series analysis (e.g. ARIMA, LSTM). This model will use key features like sensor data and performance metrics to identify unusual patterns.\n",
    "\n",
    "## **📊Proposed Datasets:**\n",
    "\n",
    "1.  Source: Kaggle - [Machine Predictive Maintenance Classification](https://www.kaggle.com/datasets/shivamb/machine-predictive-maintenance-classification) (Synthetic dataset that reflects real predictive maintenance encountered in the industry)\n",
    "\n",
    "Data Example:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "load-dataset1",
   "metadata": {
    "message": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>UDI</th>\n",
       "      <th>Product ID</th>\n",
       "      <th>Type</th>\n",
       "      <th>Air temperature [K]</th>\n",
       "      <th>Process temperature [K]</th>\n",
       "      <th>Rotational speed [rpm]</th>\n",
       "      <th>Torque [Nm]</th>\n",
       "      <th>Tool wear [min]</th>\n",
       "      <th>Target</th>\n",
       "      <th>Failure Type</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>M14860</td>\n",
       "      <td>M</td>\n",
       "      <td>298.1</td>\n",
       "      <td>308.6</td>\n",
       "      <td>1551</td>\n",
       "      <td>42.8</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No Failure</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>L47181</td>\n",
       "      <td>L</td>\n",
       "      <td>298.2</td>\n",
       "      <td>308.7</td>\n",
       "      <td>1408</td>\n",
       "      <td>46.3</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>No Failure</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>L47182</td>\n",
       "      <td>L</td>\n",
       "      <td>298.1</td>\n",
       "      <td>308.5</td>\n",
       "      <td>1498</td>\n",
       "      <td>49.4</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>No Failure</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>L47183</td>\n",
       "      <td>L</td>\n",
       "      <td>298.2</td>\n",
       "      <td>308.6</td>\n",
       "      <td>1433</td>\n",
       "      <td>39.5</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>No Failure</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>L47184</td>\n",
       "      <td>L</td>\n",
       "      <td>298.2</td>\n",
       "      <td>308.7</td>\n",
       "      <td>1408</td>\n",
       "      <td>40.0</td>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>No Failure</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   UDI Product ID Type  Air temperature [K]  Process temperature [K]  \\\n",
       "0    1     M14860    M                298.1                    308.6   \n",
       "1    2     L47181    L                298.2                    308.7   \n",
       "2    3     L47182    L                298.1                    308.5   \n",
       "3    4     L47183    L                298.2                    308.6   \n",
       "4    5     L47184    L                298.2                    308.7   \n",
       "\n",
       "   Rotational speed [rpm]  Torque [Nm]  Tool wear [min]  Target Failure Type  \n",
       "0                    1551         42.8                0       0   No Failure  \n",
       "1                    1408         46.3                3       0   No Failure  \n",
       "2                    1498         49.4                5       0   No Failure  \n",
       "3                    1433         39.5                7       0   No Failure  \n",
       "4                    1408         40.0                9       0   No Failure  "
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#| label: load-dataset1\n",
    "#| echo: false\n",
    "import pandas as pd\n",
    "df1 = pd.read_csv(\"data/predictive_maintenance.csv\")\n",
    "df1.head(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "066e2140",
   "metadata": {},
   "source": [
    "-   Example of data, 3 categorical features and 6 numerical features to be used. This dataset will be used for classification models."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "load-dataset1a",
   "metadata": {
    "message": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>UDI</th>\n",
       "      <th>Air temperature [K]</th>\n",
       "      <th>Process temperature [K]</th>\n",
       "      <th>Rotational speed [rpm]</th>\n",
       "      <th>Torque [Nm]</th>\n",
       "      <th>Tool wear [min]</th>\n",
       "      <th>Target</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>10000.00000</td>\n",
       "      <td>10000.000000</td>\n",
       "      <td>10000.000000</td>\n",
       "      <td>10000.000000</td>\n",
       "      <td>10000.000000</td>\n",
       "      <td>10000.000000</td>\n",
       "      <td>10000.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>5000.50000</td>\n",
       "      <td>300.004930</td>\n",
       "      <td>310.005560</td>\n",
       "      <td>1538.776100</td>\n",
       "      <td>39.986910</td>\n",
       "      <td>107.951000</td>\n",
       "      <td>0.033900</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>2886.89568</td>\n",
       "      <td>2.000259</td>\n",
       "      <td>1.483734</td>\n",
       "      <td>179.284096</td>\n",
       "      <td>9.968934</td>\n",
       "      <td>63.654147</td>\n",
       "      <td>0.180981</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.00000</td>\n",
       "      <td>295.300000</td>\n",
       "      <td>305.700000</td>\n",
       "      <td>1168.000000</td>\n",
       "      <td>3.800000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>2500.75000</td>\n",
       "      <td>298.300000</td>\n",
       "      <td>308.800000</td>\n",
       "      <td>1423.000000</td>\n",
       "      <td>33.200000</td>\n",
       "      <td>53.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>5000.50000</td>\n",
       "      <td>300.100000</td>\n",
       "      <td>310.100000</td>\n",
       "      <td>1503.000000</td>\n",
       "      <td>40.100000</td>\n",
       "      <td>108.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>7500.25000</td>\n",
       "      <td>301.500000</td>\n",
       "      <td>311.100000</td>\n",
       "      <td>1612.000000</td>\n",
       "      <td>46.800000</td>\n",
       "      <td>162.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>10000.00000</td>\n",
       "      <td>304.500000</td>\n",
       "      <td>313.800000</td>\n",
       "      <td>2886.000000</td>\n",
       "      <td>76.600000</td>\n",
       "      <td>253.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               UDI  Air temperature [K]  Process temperature [K]  \\\n",
       "count  10000.00000         10000.000000             10000.000000   \n",
       "mean    5000.50000           300.004930               310.005560   \n",
       "std     2886.89568             2.000259                 1.483734   \n",
       "min        1.00000           295.300000               305.700000   \n",
       "25%     2500.75000           298.300000               308.800000   \n",
       "50%     5000.50000           300.100000               310.100000   \n",
       "75%     7500.25000           301.500000               311.100000   \n",
       "max    10000.00000           304.500000               313.800000   \n",
       "\n",
       "       Rotational speed [rpm]   Torque [Nm]  Tool wear [min]        Target  \n",
       "count            10000.000000  10000.000000     10000.000000  10000.000000  \n",
       "mean              1538.776100     39.986910       107.951000      0.033900  \n",
       "std                179.284096      9.968934        63.654147      0.180981  \n",
       "min               1168.000000      3.800000         0.000000      0.000000  \n",
       "25%               1423.000000     33.200000        53.000000      0.000000  \n",
       "50%               1503.000000     40.100000       108.000000      0.000000  \n",
       "75%               1612.000000     46.800000       162.000000      0.000000  \n",
       "max               2886.000000     76.600000       253.000000      1.000000  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#| label: load-dataset1a\n",
    "#| echo: false\n",
    "df1.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "33d1838d",
   "metadata": {},
   "source": [
    "-   There are 10000 rows on the predictive maintenance dataset, max values for Rotational speed and Tool wear might indacate outliers or some level of skewness on the data. This will be handle during the data preparation part of the project."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "load-dataset1b",
   "metadata": {
    "message": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 10000 entries, 0 to 9999\n",
      "Data columns (total 10 columns):\n",
      " #   Column                   Non-Null Count  Dtype  \n",
      "---  ------                   --------------  -----  \n",
      " 0   UDI                      10000 non-null  int64  \n",
      " 1   Product ID               10000 non-null  object \n",
      " 2   Type                     10000 non-null  object \n",
      " 3   Air temperature [K]      10000 non-null  float64\n",
      " 4   Process temperature [K]  10000 non-null  float64\n",
      " 5   Rotational speed [rpm]   10000 non-null  int64  \n",
      " 6   Torque [Nm]              10000 non-null  float64\n",
      " 7   Tool wear [min]          10000 non-null  int64  \n",
      " 8   Target                   10000 non-null  int64  \n",
      " 9   Failure Type             10000 non-null  object \n",
      "dtypes: float64(3), int64(4), object(3)\n",
      "memory usage: 781.4+ KB\n"
     ]
    }
   ],
   "source": [
    "#| label: load-dataset1b\n",
    "#| echo: false\n",
    "df1.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3d53f296",
   "metadata": {},
   "source": [
    "-   There are no missing values on this dataset\n",
    "\n",
    "2.  Source: Kaggle - [Intelligent Manufacturing Dataset](https://www.kaggle.com/datasets/ziya07/intelligent-manufacturing-dataset/data) (The Intelligent Manufacturing Dataset for Predictive Optimization is a dataset designed for research in smart manufacturing, AI-driven process optimization, and predictive maintenance)\n",
    "\n",
    "Data Example:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "load-dataset2",
   "metadata": {
    "message": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Timestamp</th>\n",
       "      <th>Machine_ID</th>\n",
       "      <th>Operation_Mode</th>\n",
       "      <th>Temperature_C</th>\n",
       "      <th>Vibration_Hz</th>\n",
       "      <th>Power_Consumption_kW</th>\n",
       "      <th>Network_Latency_ms</th>\n",
       "      <th>Packet_Loss_%</th>\n",
       "      <th>Quality_Control_Defect_Rate_%</th>\n",
       "      <th>Production_Speed_units_per_hr</th>\n",
       "      <th>Predictive_Maintenance_Score</th>\n",
       "      <th>Error_Rate_%</th>\n",
       "      <th>Efficiency_Status</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2024-01-01 00:00:00</td>\n",
       "      <td>39</td>\n",
       "      <td>Idle</td>\n",
       "      <td>74.137590</td>\n",
       "      <td>3.500595</td>\n",
       "      <td>8.612162</td>\n",
       "      <td>10.650542</td>\n",
       "      <td>0.207764</td>\n",
       "      <td>7.751261</td>\n",
       "      <td>477.657391</td>\n",
       "      <td>0.344650</td>\n",
       "      <td>14.965470</td>\n",
       "      <td>Low</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2024-01-01 00:01:00</td>\n",
       "      <td>29</td>\n",
       "      <td>Active</td>\n",
       "      <td>84.264558</td>\n",
       "      <td>3.355928</td>\n",
       "      <td>2.268559</td>\n",
       "      <td>29.111810</td>\n",
       "      <td>2.228464</td>\n",
       "      <td>4.989172</td>\n",
       "      <td>398.174747</td>\n",
       "      <td>0.769848</td>\n",
       "      <td>7.678270</td>\n",
       "      <td>Low</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2024-01-01 00:02:00</td>\n",
       "      <td>15</td>\n",
       "      <td>Active</td>\n",
       "      <td>44.280102</td>\n",
       "      <td>2.079766</td>\n",
       "      <td>6.144105</td>\n",
       "      <td>18.357292</td>\n",
       "      <td>1.639416</td>\n",
       "      <td>0.456816</td>\n",
       "      <td>108.074959</td>\n",
       "      <td>0.987086</td>\n",
       "      <td>8.198391</td>\n",
       "      <td>Low</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2024-01-01 00:03:00</td>\n",
       "      <td>43</td>\n",
       "      <td>Active</td>\n",
       "      <td>40.568502</td>\n",
       "      <td>0.298238</td>\n",
       "      <td>4.067825</td>\n",
       "      <td>29.153629</td>\n",
       "      <td>1.161021</td>\n",
       "      <td>4.582974</td>\n",
       "      <td>329.579410</td>\n",
       "      <td>0.983390</td>\n",
       "      <td>2.740847</td>\n",
       "      <td>Medium</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2024-01-01 00:04:00</td>\n",
       "      <td>8</td>\n",
       "      <td>Idle</td>\n",
       "      <td>75.063817</td>\n",
       "      <td>0.345810</td>\n",
       "      <td>6.225737</td>\n",
       "      <td>34.029191</td>\n",
       "      <td>4.796520</td>\n",
       "      <td>2.287716</td>\n",
       "      <td>159.113525</td>\n",
       "      <td>0.573117</td>\n",
       "      <td>12.100686</td>\n",
       "      <td>Low</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             Timestamp  Machine_ID Operation_Mode  Temperature_C  \\\n",
       "0  2024-01-01 00:00:00          39           Idle      74.137590   \n",
       "1  2024-01-01 00:01:00          29         Active      84.264558   \n",
       "2  2024-01-01 00:02:00          15         Active      44.280102   \n",
       "3  2024-01-01 00:03:00          43         Active      40.568502   \n",
       "4  2024-01-01 00:04:00           8           Idle      75.063817   \n",
       "\n",
       "   Vibration_Hz  Power_Consumption_kW  Network_Latency_ms  Packet_Loss_%  \\\n",
       "0      3.500595              8.612162           10.650542       0.207764   \n",
       "1      3.355928              2.268559           29.111810       2.228464   \n",
       "2      2.079766              6.144105           18.357292       1.639416   \n",
       "3      0.298238              4.067825           29.153629       1.161021   \n",
       "4      0.345810              6.225737           34.029191       4.796520   \n",
       "\n",
       "   Quality_Control_Defect_Rate_%  Production_Speed_units_per_hr  \\\n",
       "0                       7.751261                     477.657391   \n",
       "1                       4.989172                     398.174747   \n",
       "2                       0.456816                     108.074959   \n",
       "3                       4.582974                     329.579410   \n",
       "4                       2.287716                     159.113525   \n",
       "\n",
       "   Predictive_Maintenance_Score  Error_Rate_% Efficiency_Status  \n",
       "0                      0.344650     14.965470               Low  \n",
       "1                      0.769848      7.678270               Low  \n",
       "2                      0.987086      8.198391               Low  \n",
       "3                      0.983390      2.740847            Medium  \n",
       "4                      0.573117     12.100686               Low  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#| label: load-dataset2\n",
    "#| echo: false\n",
    "import pandas as pd\n",
    "df2 = pd.read_csv(\"data/manufacturing_6G_dataset.csv\")\n",
    "df2.head(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b63d4d69",
   "metadata": {},
   "source": [
    "-   Example of dataset, dates, numerical and categorical variables. This dataset will be used to explore regression models, time series analysis and anomaly detection."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "load-dataset2a",
   "metadata": {
    "message": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Machine_ID</th>\n",
       "      <th>Temperature_C</th>\n",
       "      <th>Vibration_Hz</th>\n",
       "      <th>Power_Consumption_kW</th>\n",
       "      <th>Network_Latency_ms</th>\n",
       "      <th>Packet_Loss_%</th>\n",
       "      <th>Quality_Control_Defect_Rate_%</th>\n",
       "      <th>Production_Speed_units_per_hr</th>\n",
       "      <th>Predictive_Maintenance_Score</th>\n",
       "      <th>Error_Rate_%</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>100000.000000</td>\n",
       "      <td>100000.000000</td>\n",
       "      <td>100000.000000</td>\n",
       "      <td>100000.000000</td>\n",
       "      <td>100000.000000</td>\n",
       "      <td>100000.000000</td>\n",
       "      <td>100000.000000</td>\n",
       "      <td>100000.000000</td>\n",
       "      <td>100000.000000</td>\n",
       "      <td>100000.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>25.499330</td>\n",
       "      <td>60.041458</td>\n",
       "      <td>2.549959</td>\n",
       "      <td>5.745929</td>\n",
       "      <td>25.555620</td>\n",
       "      <td>2.493418</td>\n",
       "      <td>5.008806</td>\n",
       "      <td>275.916324</td>\n",
       "      <td>0.499385</td>\n",
       "      <td>7.504100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>14.389439</td>\n",
       "      <td>17.323238</td>\n",
       "      <td>1.414127</td>\n",
       "      <td>2.451271</td>\n",
       "      <td>14.120758</td>\n",
       "      <td>1.443273</td>\n",
       "      <td>2.883666</td>\n",
       "      <td>130.096892</td>\n",
       "      <td>0.288814</td>\n",
       "      <td>4.335896</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>30.000138</td>\n",
       "      <td>0.100011</td>\n",
       "      <td>1.500183</td>\n",
       "      <td>1.000025</td>\n",
       "      <td>0.000026</td>\n",
       "      <td>0.000449</td>\n",
       "      <td>50.000375</td>\n",
       "      <td>0.000003</td>\n",
       "      <td>0.000112</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>13.000000</td>\n",
       "      <td>45.031596</td>\n",
       "      <td>1.323214</td>\n",
       "      <td>3.627318</td>\n",
       "      <td>13.355118</td>\n",
       "      <td>1.245026</td>\n",
       "      <td>2.521591</td>\n",
       "      <td>162.873618</td>\n",
       "      <td>0.248166</td>\n",
       "      <td>3.750148</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>25.000000</td>\n",
       "      <td>60.033597</td>\n",
       "      <td>2.549441</td>\n",
       "      <td>5.755460</td>\n",
       "      <td>25.536079</td>\n",
       "      <td>2.487667</td>\n",
       "      <td>5.003569</td>\n",
       "      <td>276.648922</td>\n",
       "      <td>0.499209</td>\n",
       "      <td>7.504145</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>38.000000</td>\n",
       "      <td>74.967217</td>\n",
       "      <td>3.776459</td>\n",
       "      <td>7.860267</td>\n",
       "      <td>37.796372</td>\n",
       "      <td>3.741252</td>\n",
       "      <td>7.506127</td>\n",
       "      <td>388.812761</td>\n",
       "      <td>0.748810</td>\n",
       "      <td>11.273189</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>50.000000</td>\n",
       "      <td>89.998979</td>\n",
       "      <td>4.999974</td>\n",
       "      <td>9.999889</td>\n",
       "      <td>49.999917</td>\n",
       "      <td>4.999975</td>\n",
       "      <td>9.999900</td>\n",
       "      <td>499.996768</td>\n",
       "      <td>0.999978</td>\n",
       "      <td>14.999869</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Machine_ID  Temperature_C   Vibration_Hz  Power_Consumption_kW  \\\n",
       "count  100000.000000  100000.000000  100000.000000         100000.000000   \n",
       "mean       25.499330      60.041458       2.549959              5.745929   \n",
       "std        14.389439      17.323238       1.414127              2.451271   \n",
       "min         1.000000      30.000138       0.100011              1.500183   \n",
       "25%        13.000000      45.031596       1.323214              3.627318   \n",
       "50%        25.000000      60.033597       2.549441              5.755460   \n",
       "75%        38.000000      74.967217       3.776459              7.860267   \n",
       "max        50.000000      89.998979       4.999974              9.999889   \n",
       "\n",
       "       Network_Latency_ms  Packet_Loss_%  Quality_Control_Defect_Rate_%  \\\n",
       "count       100000.000000  100000.000000                  100000.000000   \n",
       "mean            25.555620       2.493418                       5.008806   \n",
       "std             14.120758       1.443273                       2.883666   \n",
       "min              1.000025       0.000026                       0.000449   \n",
       "25%             13.355118       1.245026                       2.521591   \n",
       "50%             25.536079       2.487667                       5.003569   \n",
       "75%             37.796372       3.741252                       7.506127   \n",
       "max             49.999917       4.999975                       9.999900   \n",
       "\n",
       "       Production_Speed_units_per_hr  Predictive_Maintenance_Score  \\\n",
       "count                  100000.000000                 100000.000000   \n",
       "mean                      275.916324                      0.499385   \n",
       "std                       130.096892                      0.288814   \n",
       "min                        50.000375                      0.000003   \n",
       "25%                       162.873618                      0.248166   \n",
       "50%                       276.648922                      0.499209   \n",
       "75%                       388.812761                      0.748810   \n",
       "max                       499.996768                      0.999978   \n",
       "\n",
       "        Error_Rate_%  \n",
       "count  100000.000000  \n",
       "mean        7.504100  \n",
       "std         4.335896  \n",
       "min         0.000112  \n",
       "25%         3.750148  \n",
       "50%         7.504145  \n",
       "75%        11.273189  \n",
       "max        14.999869  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#| label: load-dataset2a\n",
    "#| echo: false\n",
    "df2.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f703b6b3",
   "metadata": {},
   "source": [
    "-   There are 100000 rows on this dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "load-dataset2b",
   "metadata": {
    "message": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 100000 entries, 0 to 99999\n",
      "Data columns (total 13 columns):\n",
      " #   Column                         Non-Null Count   Dtype  \n",
      "---  ------                         --------------   -----  \n",
      " 0   Timestamp                      100000 non-null  object \n",
      " 1   Machine_ID                     100000 non-null  int64  \n",
      " 2   Operation_Mode                 100000 non-null  object \n",
      " 3   Temperature_C                  100000 non-null  float64\n",
      " 4   Vibration_Hz                   100000 non-null  float64\n",
      " 5   Power_Consumption_kW           100000 non-null  float64\n",
      " 6   Network_Latency_ms             100000 non-null  float64\n",
      " 7   Packet_Loss_%                  100000 non-null  float64\n",
      " 8   Quality_Control_Defect_Rate_%  100000 non-null  float64\n",
      " 9   Production_Speed_units_per_hr  100000 non-null  float64\n",
      " 10  Predictive_Maintenance_Score   100000 non-null  float64\n",
      " 11  Error_Rate_%                   100000 non-null  float64\n",
      " 12  Efficiency_Status              100000 non-null  object \n",
      "dtypes: float64(9), int64(1), object(3)\n",
      "memory usage: 9.9+ MB\n"
     ]
    }
   ],
   "source": [
    "#| label: load-dataset2b\n",
    "#| echo: false\n",
    "df2.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aeea89b3",
   "metadata": {},
   "source": [
    "-   There are no missing data on any of the features.\n",
    "\n",
    "## 🗓️**Project Schedule**\n",
    "\n",
    "-   Definition of problem statement and goals. Due Date: 8/6/2025\n",
    "-   Plan to incorporate peer review feedback into project plan. Due Date: 8/7/2025\n",
    "-   Data cleaning. (handling missing, outliers, define imputation methods). Due Date: 8/13/2025\n",
    "-   Define key response on the datasets, depending on the model (might want to look like defects pass/fail) for a classification model or defect rate for a regression model. Due Date: 8/13/2025\n",
    "-   Analyze features (use PCA or others to understand which features contribute more the variability, etc.) Due Date: 8/13/2025\n",
    "-   Classification Model Creation and Validation. Due Date: 8/15/2025\n",
    "-   Regression Model Creation and Validation,. Due Date: 8/18/2025\n",
    "-   Incorporate time series analysis and compare models and recommend the best one. . Due Date: 8/18/2025\n",
    "-   Prepare final report and presentation Due Date: 8/20/2025\n",
    "\n",
    "## 📁**Project Organization**\n",
    "\n",
    "| \\| **FINAL-PROJECT-CASTRO**\n",
    "| \\| — 📁**DATA**: # Raw Data files obtained from Kaggle source in CSV format.\n",
    "| \\| \\_\\_\\_\\_\\_\\_\\|—- 📁**processed**: # Cleaned and processed datasets\n",
    "| \\| \\_\\_\\_\\_\\_\\_\\|—- 📁**results**: # model evaluation and other results\n",
    "| \\| — 📁**IMAGES**: # Any images to be used by quarto site\n",
    "| \\| — 📁**presentation_files**: # Quarto presentation files\n",
    "| \\| — 📁**extra**: # Additional documents or files used on project\n",
    "| \\| — 📁**quarto**: # quarto files\n",
    "| \\| — 📁**src**: # source code used for project\n",
    "| \\| — 📁.**github**: # github configuration files\n",
    "| \\| – 📄**requirements.txt**: # Python Dependencies\n",
    "| \\| – 📄**\\_quarto.yml** # quarto metadata and configuration\n",
    "| \\| – 📄**.gitignore** # list of files and directories to be ignore by Git\n",
    "| \\| – 📄**about.qmd** # Quarto about page with general information about the project\n",
    "| \\| – 📄**presentation.qmd** # Quarto final project presentation\n",
    "| \\| – 📄**proposal.qmd** # Project Problem statement and proposal\n",
    "| \\| – 📄**README.md** # main read me file for git.\n",
    "|"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3",
   "path": "C:\\Users\\cesar\\AppData\\Roaming\\jupyter\\kernels\\python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
